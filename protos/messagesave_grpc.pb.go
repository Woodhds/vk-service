// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSaveServiceClient is the client API for MessageSaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSaveServiceClient interface {
	SaveMessage(ctx context.Context, in *MessageSaveRequest, opts ...grpc.CallOption) (*MessageSaveResponse, error)
}

type messageSaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSaveServiceClient(cc grpc.ClientConnInterface) MessageSaveServiceClient {
	return &messageSaveServiceClient{cc}
}

func (c *messageSaveServiceClient) SaveMessage(ctx context.Context, in *MessageSaveRequest, opts ...grpc.CallOption) (*MessageSaveResponse, error) {
	out := new(MessageSaveResponse)
	err := c.cc.Invoke(ctx, "/MessageSaveService/SaveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSaveServiceServer is the server API for MessageSaveService service.
// All implementations must embed UnimplementedMessageSaveServiceServer
// for forward compatibility
type MessageSaveServiceServer interface {
	SaveMessage(context.Context, *MessageSaveRequest) (*MessageSaveResponse, error)
	mustEmbedUnimplementedMessageSaveServiceServer()
}

// UnimplementedMessageSaveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageSaveServiceServer struct {
}

func (UnimplementedMessageSaveServiceServer) SaveMessage(context.Context, *MessageSaveRequest) (*MessageSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedMessageSaveServiceServer) mustEmbedUnimplementedMessageSaveServiceServer() {}

// UnsafeMessageSaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSaveServiceServer will
// result in compilation errors.
type UnsafeMessageSaveServiceServer interface {
	mustEmbedUnimplementedMessageSaveServiceServer()
}

func RegisterMessageSaveServiceServer(s grpc.ServiceRegistrar, srv MessageSaveServiceServer) {
	s.RegisterService(&MessageSaveService_ServiceDesc, srv)
}

func _MessageSaveService_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSaveServiceServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageSaveService/SaveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSaveServiceServer).SaveMessage(ctx, req.(*MessageSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageSaveService_ServiceDesc is the grpc.ServiceDesc for MessageSaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageSaveService",
	HandlerType: (*MessageSaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMessage",
			Handler:    _MessageSaveService_SaveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/messagesave.proto",
}
