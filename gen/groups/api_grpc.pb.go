// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: groups/api.proto

package vk_messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupsService_AddFavorite_FullMethodName             = "/GroupsService/AddFavorite"
	GroupsService_RemoveGroupFromFavorite_FullMethodName = "/GroupsService/RemoveGroupFromFavorite"
	GroupsService_GetFavorites_FullMethodName            = "/GroupsService/GetFavorites"
)

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServiceClient interface {
	AddFavorite(ctx context.Context, in *AddFavoriteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveGroupFromFavorite(ctx context.Context, in *RemoveGroupFromFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoriteResponse, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) AddFavorite(ctx context.Context, in *AddFavoriteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupsService_AddFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) RemoveGroupFromFavorite(ctx context.Context, in *RemoveGroupFromFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupsService_RemoveGroupFromFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoriteResponse, error) {
	out := new(GetFavoriteResponse)
	err := c.cc.Invoke(ctx, GroupsService_GetFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility
type GroupsServiceServer interface {
	AddFavorite(context.Context, *AddFavoriteGroupRequest) (*emptypb.Empty, error)
	RemoveGroupFromFavorite(context.Context, *RemoveGroupFromFavoriteRequest) (*emptypb.Empty, error)
	GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoriteResponse, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServiceServer struct {
}

func (UnimplementedGroupsServiceServer) AddFavorite(context.Context, *AddFavoriteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorite not implemented")
}
func (UnimplementedGroupsServiceServer) RemoveGroupFromFavorite(context.Context, *RemoveGroupFromFavoriteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupFromFavorite not implemented")
}
func (UnimplementedGroupsServiceServer) GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	s.RegisterService(&GroupsService_ServiceDesc, srv)
}

func _GroupsService_AddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).AddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_AddFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).AddFavorite(ctx, req.(*AddFavoriteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_RemoveGroupFromFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupFromFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).RemoveGroupFromFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_RemoveGroupFromFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).RemoveGroupFromFavorite(ctx, req.(*RemoveGroupFromFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsService_ServiceDesc is the grpc.ServiceDesc for GroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFavorite",
			Handler:    _GroupsService_AddFavorite_Handler,
		},
		{
			MethodName: "RemoveGroupFromFavorite",
			Handler:    _GroupsService_RemoveGroupFromFavorite_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _GroupsService_GetFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups/api.proto",
}
