// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vk_post_predict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagePredictServiceClient is the client API for MessagePredictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagePredictServiceClient interface {
	Predict(ctx context.Context, in *MessagePredictRequest, opts ...grpc.CallOption) (*MessagePredictResponse, error)
	Save(ctx context.Context, in *MessageSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messagePredictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagePredictServiceClient(cc grpc.ClientConnInterface) MessagePredictServiceClient {
	return &messagePredictServiceClient{cc}
}

func (c *messagePredictServiceClient) Predict(ctx context.Context, in *MessagePredictRequest, opts ...grpc.CallOption) (*MessagePredictResponse, error) {
	out := new(MessagePredictResponse)
	err := c.cc.Invoke(ctx, "/MessagePredictService/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagePredictServiceClient) Save(ctx context.Context, in *MessageSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/MessagePredictService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagePredictServiceServer is the server API for MessagePredictService service.
// All implementations must embed UnimplementedMessagePredictServiceServer
// for forward compatibility
type MessagePredictServiceServer interface {
	Predict(context.Context, *MessagePredictRequest) (*MessagePredictResponse, error)
	Save(context.Context, *MessageSaveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessagePredictServiceServer()
}

// UnimplementedMessagePredictServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagePredictServiceServer struct {
}

func (UnimplementedMessagePredictServiceServer) Predict(context.Context, *MessagePredictRequest) (*MessagePredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedMessagePredictServiceServer) Save(context.Context, *MessageSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedMessagePredictServiceServer) mustEmbedUnimplementedMessagePredictServiceServer() {}

// UnsafeMessagePredictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagePredictServiceServer will
// result in compilation errors.
type UnsafeMessagePredictServiceServer interface {
	mustEmbedUnimplementedMessagePredictServiceServer()
}

func RegisterMessagePredictServiceServer(s grpc.ServiceRegistrar, srv MessagePredictServiceServer) {
	s.RegisterService(&MessagePredictService_ServiceDesc, srv)
}

func _MessagePredictService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagePredictServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagePredictService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagePredictServiceServer).Predict(ctx, req.(*MessagePredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagePredictService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagePredictServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagePredictService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagePredictServiceServer).Save(ctx, req.(*MessageSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagePredictService_ServiceDesc is the grpc.ServiceDesc for MessagePredictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagePredictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessagePredictService",
	HandlerType: (*MessagePredictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _MessagePredictService_Predict_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _MessagePredictService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "predict/predict.proto",
}
